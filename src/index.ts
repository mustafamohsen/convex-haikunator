/**
 * convex-haikunator
 * MIT Â© 2025 Mustafa Mohsen
 * Inspired by: https://github.com/Atrox/haikunatorjs/
 */

export type Config = {
  delimiter?: string;
  tokenLength?: number;
  tokenHex?: boolean;
  tokenChars?: string;
};

export interface GenerateArgs {
  adjectives?: string[];
  nouns?: string[];
  defaults?: Config;
  options?: Config;
}

/** lodash.defaults-like shallow merge */
export function applyDefaults<T extends object, U extends object>(
  target: T | undefined,
  defaults: U
): T & U {
  const result: Record<string, unknown> = { ...defaults };
  if (target) {
    for (const key of Object.keys(target)) {
      const val = (target as Record<string, unknown>)[key];
      if (val !== undefined) {
        result[key] = val;
      }
    }
  }
  return result;
}

/** Deterministic PRNG: FNV-1a hash -> mulberry32 */
export function fnv1a32(str: string): number {
  let h = 0x811c9dc5 >>> 0;
  for (let i = 0; i < str.length; i++) {
    h ^= str.charCodeAt(i);
    h = Math.imul(h, 0x01000193);
  }
  return h >>> 0;
}

export function mulberry32(a: number): () => number {
  return function () {
    let t = (a += 0x6d2b79f5);
    t = Math.imul(t ^ (t >>> 15), 1 | t);
    t ^= t + Math.imul(t ^ (t >>> 7), 61 | t);
    return ((t ^ (t >>> 14)) >>> 0) / 4294967296;
  };
}

function randInt(rng: () => number, n: number): number {
  if (n <= 0) {
    return 0;
  }
  return Math.floor(rng() * n);
}

export const defaultAdjectives = [
  "able",
  "absolute",
  "active",
  "actual",
  "adapted",
  "adept",
  "alert",
  "amazing",
  "ancient",
  "angry",
  "artful",
  "awesome",
  "basic",
  "beautiful",
  "big",
  "bitter",
  "bold",
  "brave",
  "bright",
  "brisk",
  "busy",
  "calm",
  "capable",
  "careful",
  "casual",
  "charming",
  "cheerful",
  "clean",
  "clever",
  "clear",
  "close",
  "coarse",
  "cold",
  "colorful",
  "common",
  "complex",
  "cool",
  "cozy",
  "creative",
  "crispy",
  "crisp",
  "curious",
  "cute",
  "daily",
  "daring",
  "dark",
  "dear",
  "deep",
  "delightful",
  "direct",
  "distinct",
  "dry",
  "early",
  "easy",
  "eager",
  "elated",
  "electric",
  "elegant",
  "eminent",
  "equal",
  "essential",
  "every",
  "exact",
  "excited",
  "expert",
  "fabulous",
  "fair",
  "famous",
  "fancy",
  "fast",
  "fearless",
  "fine",
  "firm",
  "fluent",
  "formal",
  "fortunate",
  "fresh",
  "friendly",
  "fun",
  "funny",
  "gentle",
  "gifted",
  "glad",
  "global",
  "golden",
  "good",
  "grand",
  "great",
  "green",
  "happy",
  "hardy",
  "harsh",
  "healthy",
  "helpful",
  "heroic",
  "honest",
  "hopeful",
  "hot",
  "huge",
  "humble",
  "ideal",
  "immense",
  "immediate",
  "important",
  "inner",
  "intense",
  "jolly",
  "joyful",
  "jumpy",
  "keen",
  "kind",
  "lively",
  "local",
  "lucky",
  "major",
  "marvelous",
  "mellow",
  "merry",
  "mighty",
  "modern",
  "modest",
  "moral",
  "mystic",
  "narrow",
  "natural",
  "neat",
  "new",
  "nice",
  "noble",
  "normal",
  "novel",
  "odd",
  "okay",
  "old",
  "open",
  "outgoing",
  "patient",
  "peaceful",
  "perfect",
  "plain",
  "playful",
  "pleasant",
  "polite",
  "popular",
  "positive",
  "powerful",
  "precious",
  "pretty",
  "proud",
  "quick",
  "quiet",
  "rare",
  "real",
  "ready",
  "regular",
  "reliable",
  "rich",
  "right",
  "robust",
  "royal",
  "safe",
  "sandy",
  "savvy",
  "secure",
  "serene",
  "sharp",
  "shiny",
  "short",
  "silent",
  "simple",
  "sincere",
  "skilled",
  "slim",
  "smart",
  "smooth",
  "social",
  "soft",
  "solid",
  "speedy",
  "spicy",
  "spirited",
  "splendid",
  "square",
  "stable",
  "steady",
  "sterling",
  "still",
  "strong",
  "sturdy",
  "subtle",
  "sunny",
  "sure",
  "sweet",
  "swift",
  "tall",
  "tame",
  "tender",
  "thankful",
  "thrifty",
  "tidy",
  "tough",
  "true",
  "trusty",
  "upbeat",
  "useful",
  "vague",
  "vast",
  "vibrant",
  "vivid",
  "warm",
  "wealthy",
  "welcome",
  "well",
  "whole",
  "wild",
  "willing",
  "wise",
  "witty",
  "worthy",
  "young",
  "zany",
  "zealous",
  "zesty",
] as const;

export const defaultNouns = [
  "apple",
  "arch",
  "artist",
  "arrow",
  "baby",
  "back",
  "badge",
  "ball",
  "band",
  "bank",
  "barn",
  "base",
  "bear",
  "beast",
  "bee",
  "bell",
  "berry",
  "bird",
  "boat",
  "body",
  "book",
  "boot",
  "boss",
  "bowl",
  "box",
  "boy",
  "branch",
  "bread",
  "bridge",
  "brood",
  "broom",
  "brush",
  "bug",
  "bulb",
  "bull",
  "bush",
  "butter",
  "cabin",
  "cake",
  "camel",
  "camp",
  "canal",
  "candle",
  "canyon",
  "car",
  "card",
  "care",
  "cart",
  "case",
  "castle",
  "cat",
  "chain",
  "chair",
  "chalk",
  "chance",
  "chart",
  "charm",
  "chase",
  "cheese",
  "cherry",
  "chest",
  "chief",
  "child",
  "chimney",
  "circle",
  "city",
  "clam",
  "cliff",
  "clock",
  "cloud",
  "clown",
  "coach",
  "coat",
  "coin",
  "color",
  "comet",
  "compass",
  "cook",
  "copper",
  "corner",
  "cotton",
  "cow",
  "crab",
  "craft",
  "crane",
  "cream",
  "crew",
  "crow",
  "crown",
  "crystal",
  "cup",
  "curtain",
  "cushion",
  "dad",
  "daisy",
  "dance",
  "day",
  "deal",
  "deer",
  "desk",
  "dirt",
  "dog",
  "doll",
  "door",
  "dragon",
  "dream",
  "dress",
  "drum",
  "duck",
  "dust",
  "eagle",
  "earth",
  "egg",
  "elbow",
  "elf",
  "engine",
  "eye",
  "face",
  "farm",
  "feast",
  "feather",
  "field",
  "fight",
  "fire",
  "fish",
  "flag",
  "flame",
  "flood",
  "floor",
  "flower",
  "fly",
  "fog",
  "food",
  "foot",
  "forest",
  "fork",
  "fox",
  "frame",
  "friend",
  "frog",
  "fruit",
  "game",
  "garden",
  "gate",
  "gem",
  "ghost",
  "giant",
  "girl",
  "glass",
  "glove",
  "goat",
  "gold",
  "goose",
  "grain",
  "grass",
  "green",
  "guard",
  "guest",
  "guitar",
  "hair",
  "hall",
  "hand",
  "hat",
  "hawk",
  "head",
  "heart",
  "hill",
  "home",
  "horse",
  "house",
  "ice",
  "idea",
  "ink",
  "island",
  "jar",
  "jewel",
  "job",
  "jungle",
  "king",
  "kite",
  "kitten",
  "lake",
  "lamp",
  "land",
  "leaf",
  "leg",
  "lion",
  "lip",
  "lock",
  "log",
  "lotus",
  "love",
  "machine",
  "mail",
  "man",
  "map",
  "market",
  "mask",
  "meal",
  "meadow",
  "meat",
  "metal",
  "milk",
  "moon",
  "mountain",
  "mouse",
  "mouth",
  "music",
  "name",
  "nest",
  "net",
  "night",
  "nose",
  "note",
  "nut",
  "oak",
  "ocean",
  "oil",
  "orange",
  "order",
  "owl",
  "ox",
  "page",
  "paint",
  "palace",
  "pan",
  "pants",
  "paper",
  "park",
  "path",
  "peach",
  "pear",
  "pen",
  "pencil",
  "person",
  "pet",
  "phone",
  "piano",
  "pig",
  "pine",
  "pipe",
  "place",
  "plane",
  "plant",
  "plate",
  "plum",
  "pocket",
  "pond",
  "pool",
  "post",
  "pot",
  "power",
  "queen",
  "rabbit",
  "rain",
  "rat",
  "ray",
  "ring",
  "river",
  "road",
  "rock",
  "roof",
  "room",
  "root",
  "rose",
  "row",
  "rule",
  "salt",
  "sand",
  "school",
  "sea",
  "seed",
  "ship",
  "shoe",
  "shop",
  "shore",
  "silver",
  "sky",
  "snake",
  "snow",
  "soap",
  "sock",
  "song",
  "sound",
  "space",
  "spoon",
  "spring",
  "square",
  "star",
  "stone",
  "store",
  "storm",
  "story",
  "street",
  "sun",
  "table",
  "tail",
  "talk",
  "tank",
  "team",
  "tent",
  "thing",
  "thought",
  "thread",
  "throne",
  "time",
  "tool",
  "tooth",
  "town",
  "toy",
  "tree",
  "trick",
  "trout",
  "truck",
  "trumpet",
  "turtle",
  "valley",
  "vase",
  "voice",
  "wall",
  "watch",
  "water",
  "wave",
  "way",
  "whale",
  "wheel",
  "wind",
  "wing",
  "wolf",
  "wood",
  "word",
  "work",
  "world",
  "worm",
  "yard",
  "youth",
  "zebra",
  "zone",
] as const;

const defaultOptions: Config = {
  delimiter: "-",
  tokenLength: 4,
  tokenHex: false,
  tokenChars: "0123456789",
};

export function generateHaikuName(args: {
  adjectives?: readonly string[];
  nouns?: readonly string[];
  defaults?: Config;
  options?: Config;
  rng: () => number;
}): {
  name: string;
  parts: { adjective: string; noun: string; token: string };
} {
  const adjectives = (
    args.adjectives?.length ? args.adjectives : defaultAdjectives
  ) as readonly string[];
  const nouns = (args.nouns?.length ? args.nouns : defaultNouns) as readonly string[];

  const base = applyDefaults(args.defaults, defaultOptions);
  const config = applyDefaults(args.options, base);

  if (config.tokenHex === true) {
    config.tokenChars = "0123456789abcdef";
  }

  const adjective = adjectives[randInt(args.rng, adjectives.length)];
  const noun = nouns[randInt(args.rng, nouns.length)];

  const tokenLen = config.tokenLength ?? 0;
  const tokenChars = config.tokenChars ?? "";
  let token = "";
  for (let i = 0; i < tokenLen; i++) {
    token += tokenChars[randInt(args.rng, tokenChars.length)] ?? "";
  }

  const name = [adjective, noun, token].filter(Boolean).join(config.delimiter ?? "-");
  return { name, parts: { adjective, noun, token } };
}

/** Deterministic preview: safe for Convex queries */
export function seededPreview(
  seed: string,
  args: GenerateArgs = {}
): { name: string; parts: { adjective: string; noun: string; token: string } } {
  const seedInt = fnv1a32(
    JSON.stringify({
      seed,
      adjectives: args.adjectives ?? null,
      nouns: args.nouns ?? null,
      defaults: args.defaults ?? null,
      options: args.options ?? null,
    })
  );
  const rng = mulberry32(seedInt);
  return generateHaikuName({
    adjectives: args.adjectives,
    nouns: args.nouns,
    defaults: args.defaults,
    options: args.options,
    rng,
  });
}

/** Non-deterministic generation: use in Convex actions or server code */
export async function randomGenerate(args: GenerateArgs = {}): Promise<{
  name: string;
  parts: { adjective: string; noun: string; token: string };
}> {
  let seedInt: number;
  try {
    // Node env
    const { randomInt } = await import("node:crypto");
    seedInt = randomInt(0, 0xffffffff);
  } catch {
    // Browser fallback
    if (typeof crypto !== "undefined" && "getRandomValues" in crypto) {
      const buf = new Uint32Array(1);
      (crypto as Crypto).getRandomValues(buf);
      seedInt = buf[0] >>> 0;
    } else {
      seedInt = Math.floor(Math.random() * 0xffffffff) >>> 0;
    }
  }
  const rng = mulberry32(seedInt);
  return generateHaikuName({
    adjectives: args.adjectives,
    nouns: args.nouns,
    defaults: args.defaults,
    options: args.options,
    rng,
  });
}
